





The ``add_license_headers.py`` module
=====================================

.. py:module:: src.ansys.pre_commit_hooks.add_license_headers


Summary
-------








.. py:currentmodule:: add_license_headers
.. tab-set::







    .. tab-item:: Functions

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~set_lint_args`
            - Add lint arguments to the parser for `REUSE <https://reuse.software/>`_.


          * - :py:obj:`~link_assets`
            - Link the default template and/or license from the assets folder to your git repo.


          * - :py:obj:`~mkdirs_and_link`
            - Make .reuse or LICENSES directory and create symbolic link to file.


          * - :py:obj:`~list_noncompliant_files`
            - Get a list of the files that are missing license headers.


          * - :py:obj:`~set_header_args`
            - Set arguments for `REUSE <https://reuse.software/>`_.


          * - :py:obj:`~non_recursive_file_check`
            - Check if the committed file is missing its header.


          * - :py:obj:`~recursive_file_check`
            - Check if the committed file is missing its header.


          * - :py:obj:`~check_same_content`
            - Check if file before the hook ran is the same as after the hook ran.


          * - :py:obj:`~add_hook_changes`
            - Add earlier hook changes to updated file with header.


          * - :py:obj:`~get_full_paths`
            - Update file paths to be absolute paths with system separators.


          * - :py:obj:`~update_year_range`
            - Update the year or year range in the LICENSE file.


          * - :py:obj:`~update_license_file`
            - Update the LICENSE file to match MIT.txt, adjusting the year span to each repository.


          * - :py:obj:`~cleanup`
            - Unlink the default asset files, and remove directories if empty.


          * - :py:obj:`~find_files_missing_header`
            - Find files that are missing license headers and run `REUSE <https://reuse.software/>`_ on them.


          * - :py:obj:`~main`
            - Find files missing license headers and run `REUSE <https://reuse.software/>`_ on them.




    .. tab-item:: Constants

        .. list-table::
          :header-rows: 0
          :widths: auto


          * - :py:obj:`~DEFAULT_TEMPLATE`
            - Default template to use for license headers.


          * - :py:obj:`~DEFAULT_COPYRIGHT`
            - Default copyright line for license headers.


          * - :py:obj:`~DEFAULT_LICENSE`
            - Default license for headers.


          * - :py:obj:`~DEFAULT_START_YEAR`
            - 















Description
-----------

Module for running `REUSE <https://reuse.software/>`_ to add missing license headers to files.

A license header consists of the Ansys copyright statement and licensing information.

..
    !! processed by numpydoc !!






Module detail
-------------

.. py:function:: set_lint_args(parser: argparse.ArgumentParser) -> argparse.Namespace

   
   Add lint arguments to the parser for `REUSE <https://reuse.software/>`_.


   :Parameters:

       **parser: argparse.ArgumentParser**
           Parser without any lint arguments.



   :Returns:

       :obj:`argparse.Namespace`
           Parser namespace containing lint arguments.











   ..
       !! processed by numpydoc !!

.. py:function:: link_assets(assets: dict, git_root: str, args: argparse.Namespace) -> None

   
   Link the default template and/or license from the assets folder to your git repo.


   :Parameters:

       **assets: dict**
           Dictionary containing the asset folder information.

       **git_root: str**
           Full path of the repository's root directory.

       **args: argparse.Namespace**
           Namespace of arguments with their values.














   ..
       !! processed by numpydoc !!

.. py:function:: mkdirs_and_link(asset_dir: str, hook_asset_dir: str, repo_asset_dir: str, filename: str) -> None

   
   Make .reuse or LICENSES directory and create symbolic link to file.


   :Parameters:

       **asset_dir: str**
           Path of the asset directory required for REUSE (.reuse/templates or LICENSES).

       **hook_asset_dir: str**
           Full path of the hook's asset directory.

       **repo_asset_dir: str**
           Full path of the git repository's asset directory.

       **filename: str**
           Name of the file to be linked from the hook_asset_dir to the repo_asset_dir.














   ..
       !! processed by numpydoc !!

.. py:function:: list_noncompliant_files(args: argparse.Namespace, proj: reuse.project.Project) -> list

   
   Get a list of the files that are missing license headers.


   :Parameters:

       **args: argparse.Namespace**
           Namespace of arguments with their values.

       **proj: project.Project**
           Project to run `REUSE <https://reuse.software/>`_ on.



   :Returns:

       :class:`python:list`
           List of the files that are missing license headers.











   ..
       !! processed by numpydoc !!

.. py:function:: set_header_args(parser: argparse.ArgumentParser, start_year: str, current_year: int, file_path: str, copyright: str, template: str) -> argparse.Namespace

   
   Set arguments for `REUSE <https://reuse.software/>`_.


   :Parameters:

       **parser: argparse.ArgumentParser**
           Parser containing default license header arguments.

       **year: int**
           Current year retrieved by datetime.

       **file_path: str**
           Specific file path to create license headers.

       **copyright: str**
           Copyright line for license headers.

       **template: str**
           Name of the template for license headers (name.jinja2).



   :Returns:

       :obj:`argparse.Namespace`
           Namespace of arguments with their values.











   ..
       !! processed by numpydoc !!

.. py:function:: non_recursive_file_check(changed_headers, parser, values, proj, missing_headers)

   
   Check if the committed file is missing its header.


   :Parameters:

       **changed_headers: int**
           ``0`` if no headers were added or updated.
           ``1`` if headers were added or updated.

       **parser: argparse.ArgumentParser**
           Parser containing default license header arguments.

       **values: dict**
           Dictionary containing the values of files, copyright,
           template, license, changed_headers, year, and git_repo.

       **proj: project.Project**
           Project to run `REUSE <https://reuse.software/>`_ on.

       **missing_headers: list**
           Committed files that are missing copyright and/or
           license information in their headers.



   :Returns:

       :class:`python:int`
           ``0`` if all files contain headers and are up to date.
           ``1`` if ``REUSE`` changed all noncompliant files.











   ..
       !! processed by numpydoc !!

.. py:function:: recursive_file_check(changed_headers, parser, values, proj, missing_headers, count)

   
   Check if the committed file is missing its header.


   :Parameters:

       **changed_headers: int**
           ``0`` if no headers were added or updated.
           ``1`` if headers were added or updated.

       **parser: argparse.ArgumentParser**
           Parser containing default license header arguments.

       **values: dict**
           Dictionary containing the values of files, copyright,
           template, license, changed_headers, year, and git_repo.

       **proj: project.Project**
           Project to run `REUSE <https://reuse.software/>`_ on.

       **missing_headers: list**
           Committed files that are missing copyright and/or
           license information in their headers.

       **count: int**
           Integer of the location in the files array.



   :Returns:

       :class:`python:int`
           ``0`` if all files contain headers and are up to date.
           ``1`` if ``REUSE`` changed all noncompliant files.











   ..
       !! processed by numpydoc !!

.. py:function:: check_same_content(before_hook, after_hook)

   
   Check if file before the hook ran is the same as after the hook ran.


   :Parameters:

       **before_hook: str**
           Path to file before add-license-headers was run.

       **after_hook: str**
           Path to file after add-license-headers was run.



   :Returns:

       :ref:`bool <python:bltin-boolean-values>`
           ``True`` if the files have the same content.
           ``False`` if the files have different content.











   ..
       !! processed by numpydoc !!

.. py:function:: add_hook_changes(before_hook: str, after_hook: str) -> None

   
   Add earlier hook changes to updated file with header.


   :Parameters:

       **before_hook: str**
           Path to file before add-license-headers was run.

       **after_hook: str**
           Path to file after add-license-headers was run.














   ..
       !! processed by numpydoc !!

.. py:function:: get_full_paths(file_list: list) -> list

   
   Update file paths to be absolute paths with system separators.


   :Parameters:

       **file_list: list**
           List containing committed files.



   :Returns:

       :class:`python:list`
           List containing the full paths of committed files.











   ..
       !! processed by numpydoc !!

.. py:function:: update_year_range(user_start_year, match_start_year, current_year, match_end_year)

   
   Update the year or year range in the LICENSE file.


   :Parameters:

       **user_start_year: str**
           The start year supplied by the user in the pre-commit hook configuration.

       **match_start_year: str**
           The start year of the year range in the LICENSE file. For example, the LICENSE file
           contains the range "2023 - 2024", so match_start_year is 2023.

       **current_year: str**
           The current year based on the datetime module.

       **match_end_year: str**
           The end year of the year range in the LICENSE file. For example, the LICENSE file
           contains the range "2023 - 2024", so match_end_year is 2024.














   ..
       !! processed by numpydoc !!

.. py:function:: update_license_file(arg_dict: dict) -> int

   
   Update the LICENSE file to match MIT.txt, adjusting the year span to each repository.


   :Parameters:

       **arg_dict: dict**
           Dictionary containing the committed files, custom copyright, template, license,
           changed_headers, start & end year, and git_repo














   ..
       !! processed by numpydoc !!

.. py:function:: cleanup(assets: dict, os_git_root: str) -> None

   
   Unlink the default asset files, and remove directories if empty.


   :Parameters:

       **assets: dict**
           Dictionary containing assets information

       **os_git_root: str**
           Full path of the repository's root directory.














   ..
       !! processed by numpydoc !!

.. py:function:: find_files_missing_header() -> int

   
   Find files that are missing license headers and run `REUSE <https://reuse.software/>`_ on them.





   :Returns:

       :class:`python:int`
           ``1`` if ``REUSE`` changed all noncompliant files.
           
           ``2`` if the ``.reuse`` or location directory does not exist in the root path
           of the GitHub repository.











   ..
       !! processed by numpydoc !!

.. py:function:: main()

   
   Find files missing license headers and run `REUSE <https://reuse.software/>`_ on them.
















   ..
       !! processed by numpydoc !!

.. py:data:: DEFAULT_TEMPLATE
   :value: 'ansys'


   
   Default template to use for license headers.
















   ..
       !! processed by numpydoc !!

.. py:data:: DEFAULT_COPYRIGHT
   :value: 'ANSYS, Inc. and/or its affiliates.'


   
   Default copyright line for license headers.
















   ..
       !! processed by numpydoc !!

.. py:data:: DEFAULT_LICENSE
   :value: 'MIT'


   
   Default license for headers.
















   ..
       !! processed by numpydoc !!

.. py:data:: DEFAULT_START_YEAR



