[{"objectID":"Home","href":"index.html#ansys-pre-commit-hooks","title":"Ansys pre-commit hooks","text":"Ansys pre-commit hooks\n\nThis repository provides pre-commit hooks for performing checks on Ansys repositories.\n\nGetting started \n\nLearn how to set up the available pre-commit hooks.\n\nSet-up\n\ngetting-started/index\n\nContribute \n\nLearn how to create, update, and test pre-commit hooks.\n\nDevelop Test\n\ncontribute/index\n\nAPI reference \n\nLearn about the functions and modules of the pre-commit hooks in the repository.\n\napi/index\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Directories.html#directories","title":"Directories","text":"Directories\n\n\n\nclass src.ansys.pre_commit_hooks.tech_review.Directories(*args, **kwds)\n\nBases: enum.Enum\n\nEnum of directories to check."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Directories.html#overview","title":"Directories > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nGITHUB\n\n\n\nDOC\n\n\n\nSRC\n\n\n\nTESTS\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Directories.html#import-detail","title":"Directories > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Directories.html#attribute-detail","title":"Directories > Attribute detail","text":"Attribute detail\n\n\n\nDirectories.GITHUB = '.github'\n\n\n\n\n\nDirectories.DOC = 'doc'\n\n\n\n\n\nDirectories.SRC = 'src'\n\n\n\n\n\nDirectories.TESTS = 'tests'\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/index.html#the-srcansyspre_commit_hooks-library","title":"The src.ansys.pre_commit_hooks library","text":"The src.ansys.pre_commit_hooks library\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/index.html#summary","title":"The src.ansys.pre_commit_hooks library > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nadd_license_headers\n\nModule for running REUSE to add missing license headers to files.\n\ntech_review\n\nModule for checking if a repository is compliant with required files in the technical review.\n\nAttributes\n\n\n\n\n\n__version__\n\n\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/index.html#description","title":"The src.ansys.pre_commit_hooks library > Description","text":"Description\n\nModule for initializing package-level imports for Ansys pre-commit hooks."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/index.html#module-detail","title":"The src.ansys.pre_commit_hooks library > Module detail","text":"Module detail\n\n\n\npre_commit_hooks.__version__\n\n"},{"objectID":"Home","href":"getting-started/add-license-headers/index.html#add-license-headers-setup","title":"add-license-headers setup","text":"add-license-headers setup\n\nThe add-license-headers hook adds and updates license headers in specified directories and\nfile types using REUSE. Here is a sample license header for a\nPython file generated by the template with a start year of 2023:\n\nTo get started, add the hook to your .pre-commit-config.yaml file:\n\nThe hook runs on protocol buffer (PROTO) files in any directory, as well as Python files within\ndirectories named src, examples, and tests.\n\nIf your repository was created before the current year, add the --start_year argument with the\nyear that your first file was committed. The ansys-pre-commit-hooks repository started in 2023,\nso the .pre-commit-config.yaml file looks like this:\n\nBy default, the\nansys.jinja2\ntemplate is used to generate the license headers for files.\n\nThe template contains the following variables:\n\n{{ copyright_line }}: Contains the current year and the phrase\n“ANSYS, Inc. and/or its affiliates.” by default.\n\n{{ expression }}: Contains the SPDX-License-Identifier expression, which is “MIT” by default."},{"objectID":"Home","href":"getting-started/add-license-headers/index.html#add-license-headers-hook-arguments","title":"add-license-headers setup > add-license-headers hook arguments","text":"add-license-headers hook arguments\n\n\n\n\n\n\n\nArgument\n\nDefault value\n\nDescription\n\n--custom_copyright\n\nANSYS, Inc. and/or its affiliates.\n\nCopyright line to include in the license header.\n\n--custom_template\n\nansys\n\nName of the .jinja2 template file located in the .reuse/templates/ directory.\n\n--custom_license\n\nMIT\n\nSPDX-License-Identifier expression to include in the license header. To view\nthe list of valid SPDX license expressions, see the\nSPDX License List.\n\n--start_year\n\n2023\n\nYear that the first file was committed to the repository.\n\n--ignore_license_check\n\nFalse\n\nWhether to check for the license in the header."},{"objectID":"Home","href":"getting-started/add-license-headers/index.html#frequently-asked-questions","title":"add-license-headers setup > Frequently asked questions","text":"Frequently asked questions\n\nHow do you specify additional directories and files to run the hook on?\n\nTo specify additional files and/or directories the hook should run on, add the necessary regex\nto the files line in your .pre-commit-config.yaml file:\n\nThis would run the hook on Python and ReStructuredText (RST) files in the src,\nexamples, tests, and doc directories, as well as PROTO and CPP files\nin any directory.\n\nThe default regex for the files field is '(src|examples|tests)/.*\\.(py)|\\.(proto)'.\nAdd onto this regex to specify additional files and directories to ensure that the hook\nruns on Python files in the src, examples, and tests directories, as well as\nPROTO files in any directory at the minimum.\n\nHow do you ignore specific files or file types?\n\nTo ignore specific files or file types, add the exclude argument to the hook in your\n.pre-commit-config.yaml file:\n\npath/to/file1.py excludes the stated file.\n\npath/to/.*\\.(ts|cpp) excludes all TS and CPP files within the path/to directory.\n\n(.folder1|folder2)/.* excludes directories named .folder1 and folder2.\n\n.*\\.js excludes all JS files in all directories.\n\n\\..* excludes all hidden files.\n\nHow do you change the copyright phrase from “ANSYS, Inc. and/or its affiliates.”?\n\nTo change the copyright phrase in the copyright line, add the --custom_copyright argument\nto the hook in your .pre-commit-config.yaml file:\n\nThis would change the copyright line to Copyright (C) 2025 custom copyright phrase.\n\nHow do you ignore checking for licensing information in the files?\n\nTo ignore checking for the MIT license in the files, add the --ignore_license_check\nargument to the hook in your .pre-commit-config.yaml file:\n\nHow do you use a custom template?\n\nTo use a custom template, create the .reuse/templates/ directory in the root of your\nrepository and add the Jinja template to that directory. The custom template cannot be named\nansys.jinja2. Otherwise, it would be removed after the hook is done running.\n\nAdd the --custom_template argument to the hook in your .pre-commit-config.yaml file:\n\nHow do you use a custom license?\n\nTo use a custom license, create the LICENSES directory in the root of your\nrepository and add the license to that directory. The custom license cannot be named\nMIT.txt. Otherwise, it would be removed after the hook is done running.\n\nTo use a custom license, add the --custom_license argument to the hook in your\n.pre-commit-config.yaml file:\n\nLicenses supported by REUSE can be found in the\nspdx/license-list-data repository.\nSelect a license text file from that repository and copy it to the LICENSES directory.\n\nWhat should the start year be if my repository was created before the current year?\n\nIf you are adding license headers to repositories that were started prior to the current year,\nadd the --start_year argument with the year that your first file was committed. For\nexample, if start_year is 2023 and the current year is 2025, the copyright statement would\nbe:\n\nCopyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates."},{"objectID":"Home","href":"getting-started/add-license-headers/index.html#known-issues-and-limitations","title":"add-license-headers setup > Known issues and limitations","text":"Known issues and limitations\n\nAfter running the hook, I am seeing a “Skipped unrecognized file” message\n\nThe hook skips files that are not recognized by REUSE.\nIf you see this message, the file type is not supported by the hook.  For a list of\nsupported file types, see the\nEXTENSION_COMMENT_STYLE_MAP\nin the reuse-tool repository.\n\nTo request support for an unrecognized file type, open an\nissue in the ansys/pre-commit-hooks\nrepository.\n\n"},{"objectID":"Home","href":"getting-started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nLearn how to set up the available pre-commit hooks:\n\nAdd license headers \n\nA hook that adds and updates license headers in specified directories and file types\nusing the REUSE repository.\n\nSet-up\n\nadd-license-headers/index\n\nTechnical review \n\nA hook that performs a brief technical review on repositories based on the\nAnsys repository requirements.\n\nSet-up\n\ntechnical-review/index\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Filenames.html#filenames","title":"Filenames","text":"Filenames\n\n\n\nclass src.ansys.pre_commit_hooks.tech_review.Filenames(*args, **kwds)\n\nBases: enum.Enum\n\nEnum of files to check."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Filenames.html#overview","title":"Filenames > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nAUTHORS\n\n\n\nCODE_OF_CONDUCT\n\n\n\nCONTRIBUTING\n\n\n\nCONTRIBUTORS\n\n\n\nLICENSE\n\n\n\nREADME\n\n\n\nDEPENDABOT\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Filenames.html#import-detail","title":"Filenames > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/Filenames.html#attribute-detail","title":"Filenames > Attribute detail","text":"Attribute detail\n\n\n\nFilenames.AUTHORS = 'AUTHORS'\n\n\n\n\n\nFilenames.CODE_OF_CONDUCT = 'CODE_OF_CONDUCT.md'\n\n\n\n\n\nFilenames.CONTRIBUTING = 'CONTRIBUTING.md'\n\n\n\n\n\nFilenames.CONTRIBUTORS = 'CONTRIBUTORS.md'\n\n\n\n\n\nFilenames.LICENSE = 'LICENSE'\n\n\n\n\n\nFilenames.README = 'README'\n\n\n\n\n\nFilenames.DEPENDABOT = 'dependabot.yml'\n\n"},{"objectID":"Home","href":"contribute/add-hook.html#creating-a-pre-commit-hook","title":"Creating a pre-commit hook","text":"Creating a pre-commit hook\n\nCreate a Python file in the src/ansys/pre_commit_hooks\ndirectory. For example, new_hook.py, with a main function:\n\nThe main function of the hook must return a non-zero exit code if the hook fails. For the\nhooks in the Ansys Pre-Commit Hooks repository, the exit code is set to 1 if the hook fails\nand 0 if the hook passes.\n\nCreate a Python file to test the hook in the tests\ndirectory. For example, test_new_hook.py.\n\nAdd the hook to the .pre-commit-hooks.yaml file:\n\nIn the .pre-commit-hooks.yaml file, you can include additional information about the hook\nin the files, requires-serial, or pass_filenames fields. For more information, see\nthe Creating new hooks page in the\npre-commit documentation.\n\nAdd the hook to the entry_points dictionary in the setup.py file:\n\nAfter adding code to the pre-commit hook file, for example, new_hook.py, add the hook’s\nrequired dependencies to the pyproject.toml and setup.py files if they are not already\nthere:\n\nIn the pyproject.toml file, add the dependency in the requires list under the\n[build-system] section, pinning the dependency to a specific version:\n\nIn the setup.py file, add the dependency to the install_requires list, pinning\nthe dependency to a specific version:"},{"objectID":"Home","href":"contribute/index.html#contribute","title":"Contribute","text":"Contribute\n\nLearn how to contribute to the Ansys Pre-Commit Hooks repository.\n\nCreate a pre-commit hook \n\nHow to add a pre-commit hook to the repository\n\nCreate new hook\n\nadd-hook\n\nTest a pre-commit hook \n\nHow to test a pre-commit hook locally\n\nTest\n\ntesting\n\n"},{"objectID":"Home","href":"contribute/testing.html#testing-a-pre-commit-hook","title":"Testing a pre-commit hook","text":"Testing a pre-commit hook"},{"objectID":"Home","href":"contribute/testing.html#running-pre-commit-locally","title":"Testing a pre-commit hook > Running pre-commit locally","text":"Running pre-commit locally\n\nTo ensure a pre-commit hook works as expected, run pre-commit locally on the repository. First,\ninstall the ansys/pre-commit-hooks project in a virtual environment:\n\nLinux\n\n\n\nWindows\n\n\n\nNext, add the pre-commit hook to the repository’s .pre-commit-config.yaml file, copying the\ndetails of the hook from the .pre-commit-hooks.yaml file. For example, to add the new-hook\nhook:\n\nRun pre-commit on the repository:\n\nMake sure to test the hook locally on both Linux and Windows operating systems."},{"objectID":"Home","href":"contribute/testing.html#running-pytest-tests","title":"Testing a pre-commit hook > Running pytest tests","text":"Running pytest tests\n\nCreate tests using pytest in the tests directory to ensure functions in the hook work as\nexpected. For example, in test_new_hook.py:\n\nFor more information on writing tests, see the\npytest documentation."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/add_license_headers/index.html#the-add_license_headerspy-module","title":"The add_license_headers.py module","text":"The add_license_headers.py module\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/add_license_headers/index.html#summary","title":"The add_license_headers.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nset_lint_args\n\nAdd lint arguments to the parser for REUSE.\n\nget_full_paths\n\nUpdate file paths to be absolute paths with system separators.\n\nupdate_license_file\n\nUpdate the LICENSE file to match MIT.txt, adjusting the year span for each repository.\n\nlink_assets\n\nLink the default template and/or license from the assets folder to your git repo.\n\ngenerate_license_file\n\nGenerate the MIT.txt file from the assets/LICENSES/MIT.txt template.\n\nmkdirs_and_link\n\nMake .reuse or LICENSES directory and create symbolic link to file.\n\nrecursive_file_check\n\nCheck if the committed file is missing its header.\n\nnon_recursive_file_check\n\nCheck if the committed file is missing its header.\n\nset_variables\n\nSet variables to run REUSE on the project.\n\nupdate_header\n\nUpdate the license header of the file.\n\nadd_header\n\nAdd the license header to the file.\n\ncheck_same_content\n\nCheck if file before the hook ran is the same as after the hook ran.\n\napply_hook_changes\n\nAdd earlier hook changes to updated file with header.\n\nget_content\n\nRead a file and return its content.\n\nupdate_year_range\n\nUpdate the year in the copyright statement of a file.\n\nget_years_from_file\n\nGet the start and end years from the year range in the file.\n\ncleanup\n\nUnlink the default asset files, and remove directories if empty.\n\nmain\n\nAdd and update file headers with REUSE.\n\nConstants\n\n\n\n\n\nDEFAULT_TEMPLATE\n\nDefault template to use for license headers.\n\nDEFAULT_COPYRIGHT\n\nDefault copyright line for license headers.\n\nDEFAULT_LICENSE\n\nDefault license for headers.\n\nDEFAULT_START_YEAR\n\nDefault start year for license headers.\n\nYEAR_REGEX\n\nYear regex to match year or year range in files."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/add_license_headers/index.html#description","title":"The add_license_headers.py module > Description","text":"Description\n\nModule for running REUSE to add missing license headers to files.\n\nA license header consists of the Ansys copyright statement and licensing information."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/add_license_headers/index.html#module-detail","title":"The add_license_headers.py module > Module detail","text":"Module detail\n\n\n\nadd_license_headers.set_lint_args(parser: argparse.ArgumentParser) -> argparse.Namespace\n\nAdd lint arguments to the parser for REUSE.\n\nParameters\n\nparser: argparse.ArgumentParser\n\nParser without any lint arguments.\n\nReturns\n\nargparse.Namespace\n\nParser namespace containing lint arguments.\n\n\n\nadd_license_headers.get_full_paths(file_list: list) -> list\n\nUpdate file paths to be absolute paths with system separators.\n\nParameters\n\nfile_list: list\n\nList containing committed files.\n\nReturns\n\npython:list\n\nList containing the full paths of committed files.\n\n\n\nadd_license_headers.update_license_file(repo_license_path: pathlib.Path, year_span: str) -> int\n\nUpdate the LICENSE file to match MIT.txt, adjusting the year span for each repository.\n\nParameters\n\nrepo_license_path: Path\n\nPath to the LICENSE file in the repository.\n\nyear_span: str\n\nThe user start year to the current year. If they are the same, default to the current year.\n\nReturns\n\npython:int\n\n0 if the year in the LICENSE file was not updated.\n1 if the year in the LICENSE file was updated.\n\n\n\nadd_license_headers.link_assets(assets: dict, git_root: str, args: argparse.Namespace) -> None\n\nLink the default template and/or license from the assets folder to your git repo.\n\nParameters\n\nassets: dict\n\nDictionary containing the asset folder information.\n\ngit_root: str\n\nFull path of the repository’s root directory.\n\nargs: argparse.Namespace\n\nNamespace of arguments with their values.\n\n\n\nadd_license_headers.generate_license_file(template_parent_dir: pathlib.Path, year_span: int, license_file_name: pathlib.Path) -> None\n\nGenerate the MIT.txt file from the assets/LICENSES/MIT.txt template.\n\nParameters\n\ntemplate_parent_dir: Path\n\nPath to the parent directory of the template file.\n\nyear_span: int\n\nThe user start year to the current year. If they are the same, default to the current year.\nFor example, “2024” or “2023 - 2025”.\n\nlicense_file_name: Path\n\nPath to the license file in the repository to generate.\n\n\n\nadd_license_headers.mkdirs_and_link(asset_dir: str, hook_asset_dir: str, repo_asset_dir: str, filename: str) -> None\n\nMake .reuse or LICENSES directory and create symbolic link to file.\n\nParameters\n\nasset_dir: str\n\nPath of the asset directory required for REUSE (.reuse/templates or LICENSES).\n\nhook_asset_dir: str\n\nFull path of the hook’s asset directory.\n\nrepo_asset_dir: str\n\nFull path of the git repository’s asset directory.\n\nfilename: str\n\nName of the file to be linked from the hook_asset_dir to the repo_asset_dir.\n\n\n\nadd_license_headers.recursive_file_check(changed_headers: int, obj: reuse.cli.common.ClickObj, values: dict, args: argparse.Namespace, count: int) -> int\n\nCheck if the committed file is missing its header.\n\nParameters\n\nchanged_headers: int\n\n0 if no headers were added or updated.\n1 if headers were added or updated.\n\nobj: common.ClickObj\n\nA click object used in REUSE to annotate files.\n\nvalues: dict\n\nDictionary containing the values of files, copyright,\ntemplate, license, changed_headers, year, and git_repo.\n\nargs: argparse.Namespace\n\nNamespace of arguments with their values.\n\ncount: int\n\nInteger of the location in the files array.\n\nReturns\n\npython:int\n\n0 if all files contain headers and are up to date.\n1 if REUSE changed all noncompliant files.\n\n\n\nadd_license_headers.non_recursive_file_check(changed_headers: int, obj: reuse.cli.common.ClickObj, values: dict, args: argparse.Namespace) -> int\n\nCheck if the committed file is missing its header.\n\nParameters\n\nchanged_headers: int\n\n0 if no headers were added or updated.\n1 if headers were added or updated.\n\nobj: common.ClickObj\n\nA click object used in REUSE to annotate files.\n\nvalues: dict\n\nDictionary containing the values of files, copyright,\ntemplate, license, changed_headers, year, and git_repo.\n\nargs: argparse.Namespace\n\nNamespace of arguments with their values.\n\nReturns\n\npython:int\n\n0 if all files contain headers and are up to date.\n1 if REUSE changed all noncompliant files.\n\n\n\nadd_license_headers.set_variables(obj: reuse.cli.common.ClickObj, values: dict, args: argparse.Namespace) -> tuple\n\nSet variables to run REUSE on the project.\n\nParameters\n\nobj: common.ClickObj\n\nA click object used in REUSE to annotate files.\n\nvalues: dict\n\nDictionary containing the values of files, copyright,\ntemplate, license, changed_headers, year, and git_repo.\n\nargs: argparse.Namespace\n\nNamespace of arguments with their values.\n\nReturns\n\npython:tuple\n\nTuple containing the project, template, commented, license, files, copyright, and years.\n\n\n\nadd_license_headers.update_header(changed_headers: int, file: str, copyright: str, license: str, years: str, template: str, commented: bool) -> int\n\nUpdate the license header of the file.\n\nParameters\n\nchanged_headers: int\n\n0 if no headers were added or updated.\n1 if headers were added or updated.\n\nfile: str\n\nThe file whose header is being updated.\n\ncopyright: str\n\nThe copyright string of the header. For example, “ANSYS, Inc. and/or its affiliates.”\n\nlicense: str\n\nThe license of the header. For example, “MIT”.\n\nyears: str\n\nThe year span of the header. For example, “2024” or “2023 - 2025”.\n\ntemplate: str\n\nThe template to use for the header. For example, “ansys” for “ansys.jinja2”.\n\ncommented: bool\n\nWhether the template is commented or not.\n\nReturns\n\npython:int\n\n0 if all files contain headers and are up to date.\n1 if REUSE changed all noncompliant files.\n\n\n\nadd_license_headers.add_header(copyright: str, license: str, years: str, file: str, template: str, commented: bool, out: tempfile.NamedTemporaryFile | IO[str]) -> None\n\nAdd the license header to the file.\n\nParameters\n\ncopyright: str\n\nThe copyright line for the license header. For example,\n“ANSYS, Inc. and/or its affiliates.”\n\nlicense: str\n\nThe license for the license header. For example, “MIT”.\n\nyears: str\n\nThe year span in the license header. For example, “2024” or “2023 - 2025”.\n\nfile: str\n\nThe file path to add the license header to.\n\ntemplate: str\n\nThe template to use for the license header. For example, “ansys.jinja2”.\n\ncommented: bool\n\nWhether the template is commented or not.\n\ntmp: Union[NamedTemporaryFile, IO[str]]\n\nTemporary file to capture the stdout of the add_header_to_file() function or sys.stdout.\n\n\n\nadd_license_headers.check_same_content(before_hook: str, after_hook: str) -> bool\n\nCheck if file before the hook ran is the same as after the hook ran.\n\nParameters\n\nbefore_hook: str\n\nPath to file before add-license-headers was run.\n\nafter_hook: str\n\nPath to file after add-license-headers was run.\n\nReturns\n\nbool\n\nTrue if the files have the same content.\nFalse if the files have different content.\n\n\n\nadd_license_headers.apply_hook_changes(before_hook: str, after_hook: str) -> None\n\nAdd earlier hook changes to updated file with header.\n\nParameters\n\nbefore_hook: str\n\nPath to file before add-license-headers was run.\n\nafter_hook: str\n\nPath to file after add-license-headers was run.\n\n\n\nadd_license_headers.get_content(file: str) -> str\n\nRead a file and return its content.\n\nParameters\n\nfile: str\n\nPath to the file to read.\n\nReturns\n\npython:str\n\nContent of the file.\n\n\n\nadd_license_headers.update_year_range(changed_headers: int, file: str, year_regex: str, user_start_year: str, current_year: str) -> int\n\nUpdate the year in the copyright statement of a file.\n\nParameters\n\nchanged_headers: int\n\n0 if no headers were added or updated.\n1 if headers were added or updated.\n\nfile: str\n\nThe file to update the year in the header.\n\nyear_regex: str\n\nThe regex to match the year or year range in the file.\n\nuser_start_year: str\n\nThe start year provided by the user.\n\ncurrent_year: str\n\nThe current year.\n\nReturns\n\npython:int\n\n0 if the year is up to date.\n1 if the year was updated.\n\n\n\nadd_license_headers.get_years_from_file(content: str, year_regex: str) -> tuple\n\nGet the start and end years from the year range in the file.\n\nParameters\n\ncontent: str\n\nThe content of the file.\n\nyear_regex: str\n\nThe regex to match the year or year range in the file.\n\n\n\nadd_license_headers.cleanup(assets: dict, os_git_root: str) -> None\n\nUnlink the default asset files, and remove directories if empty.\n\nParameters\n\nassets: dict\n\nDictionary containing assets information\n\nos_git_root: str\n\nFull path of the repository’s root directory.\n\n\n\nadd_license_headers.main()\n\nAdd and update file headers with REUSE.\n\nReturns\n\npython:int\n\n0 if all files contain headers and are up to date.\n1 if REUSE changed all noncompliant files.\n\n\n\nadd_license_headers.DEFAULT_TEMPLATE = 'ansys'\n\nDefault template to use for license headers.\n\n\n\nadd_license_headers.DEFAULT_COPYRIGHT = 'ANSYS, Inc. and/or its affiliates.'\n\nDefault copyright line for license headers.\n\n\n\nadd_license_headers.DEFAULT_LICENSE = 'MIT'\n\nDefault license for headers.\n\n\n\nadd_license_headers.DEFAULT_START_YEAR\n\nDefault start year for license headers.\n\n\n\nadd_license_headers.YEAR_REGEX = '(\\\\d{4}) - (\\\\d{4})|\\\\d{4}'\n\nYear regex to match year or year range in files."},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#052---february-26-2025","title":"Release notes > 0.5.2 - February 26, 2025","text":"0.5.2 - February 26, 2025\n\nDependencies\n\n\n\n\n\nbump ansys-sphinx-theme[autoapi] from 1.2.4 to 1.2.6\n\n#279\n\nbump sphinx-autodoc-typehints from 3.0.0 to 3.0.1\n\n#281\n\nbump importlib-metadata from 8.5.0 to 8.6.1\n\n#283\n\nbump semver from 3.0.2 to 3.0.4\n\n#284\n\nbump ansys-sphinx-theme[autoapi] from 1.2.6 to 1.3.1\n\n#287\n\nbump sphinx-autodoc-typehints from 3.0.1 to 3.1.0\n\n#290\n\nbump ansys-sphinx-theme[autoapi] from 1.3.1 to 1.3.2\n\n#291\n\nbump sphinx from 8.1.3 to 8.2.1\n\n#292\n\nDocumentation\n\n\n\n\n\nImprove documentation\n\n#289\n\nMaintenance\n\n\n\n\n\nBump ansys-pre-commit-hooks from 0.4.4 to 0.5.1\n\n#276\n\npre-commit automatic update\n\n#285, #286, #288, #293"},{"objectID":"Release notes","href":"changelog.html#051---january-17-2025","title":"Release notes > 0.5.1 - January 17, 2025","text":"0.5.1 - January 17, 2025"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: Update license headers and fix broken tests #271\n\nfix: Fix “success” statements being printed and LICENSE file updates #273"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.2.0 to 1.2.1 #257\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.2.1 to 1.2.2 #259\n\nbuild(deps-dev): bump pytest from 8.3.3 to 8.3.4 #260\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.2.2 to 1.2.3 #264\n\nbuild(deps): bump jinja2 from 3.1.4 to 3.1.5 #267\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.2.3 to 1.2.4 #268\n\nbuild(deps): bump gitpython from 3.1.43 to 3.1.44 #269\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.5.0 to 3.0.0 #270"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\n[pre-commit.ci] pre-commit autoupdate #272"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nchore: Update code for reuse v5.0.2 #263\n\nchore: Use pathlib.Path instead of os in add_license_headers.py #266\n\nUpdate changelog file and fragment files #275"},{"objectID":"Release notes","href":"changelog.html#044---november-07-2024","title":"Release notes > 0.4.4 - November 07, 2024","text":"0.4.4 - November 07, 2024"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: there is no “owner” of libraries #233\n\nfix: LICENSE line endings #236\n\nfix: AUTHORS and CONTRIBUTORS.md files #240"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps-dev): bump sphinx from 7.4.7 to 8.0.2 #212\n\nbuild(deps-dev): bump numpydoc from 1.7.0 to 1.8.0 #218\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.0.3 to 1.0.5 #222\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.0.5 to 1.0.7 #223\n\nbuild(deps): bump importlib-metadata from 8.2.0 to 8.4.0 #224\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.0.7 to 1.0.8 #227\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.3.0 to 2.4.0 #228\n\nbuild(deps): bump importlib-metadata from 8.4.0 to 8.5.0 #229\n\nbuild(deps-dev): bump pytest from 8.3.2 to 8.3.3 #230\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.4.0 to 2.4.1 #231\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.0.8 to 1.0.11 #234\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.4.1 to 2.4.4 #235\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.0.11 to 1.1.2 #242\n\nbuild(deps-dev): bump sphinx from 8.0.2 to 8.1.3 #246\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.1.2 to 1.1.3 #247\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.4.4 to 2.5.0 #248\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.1.6 to 1.1.7 #252\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.1.7 to 1.2.0 #255\n\nbuild(deps-dev): bump pytest-cov from 5.0.0 to 6.0.0 #256"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\n[pre-commit.ci] pre-commit autoupdate #221, #225, #237, #245, #249\n\nchore: update CONTRIBUTORS.md to match guide lines #254"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 0.16.6 to 1.0.3 #219\n\nbuild(deps-dev): bump sphinx-autodoc-typehints from 2.2.3 to 2.3.0 #226\n\nbuild(deps-dev): bump ansys-sphinx-theme[autoapi] from 1.1.3 to 1.1.6 #251"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nbuild(deps): bump ansys/actions from 6 to 7 #220\n\nCHORE: Add hacktoberfest labels #241\n\nbuild(deps): bump ansys/actions from 7 to 8 #243"},{"objectID":"Release notes","href":"changelog.html#043---august-07-2024","title":"Release notes > 0.4.3 - August 07, 2024","text":"0.4.3 - August 07, 2024"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: leverage reuse vcs Git strategy #217"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\n[pre-commit.ci] pre-commit autoupdate #213"},{"objectID":"Release notes","href":"changelog.html#042---august-01-2024","title":"Release notes > 0.4.2 - August 01, 2024","text":"0.4.2 - August 01, 2024"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.4.1 #201\n\nBump version to v0.4.1 and uncomment tech review hook #202\n\nchore: adjust add-license-headers script to work with reuse 4.0.3 #211"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps-dev): bump sphinx from 7.4.0 to 7.4.7 #204\n\nbuild(deps-dev): bump pytest from 8.2.2 to 8.3.1 #206\n\nbuild(deps): bump importlib-metadata from 8.0.0 to 8.2.0 #207\n\nbuild(deps-dev): bump pytest from 8.3.1 to 8.3.2 #208"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\nchore: update code base to fix bandit warnings #209\n\n[pre-commit.ci] pre-commit autoupdate #210"},{"objectID":"Release notes","href":"changelog.html#041---july-15-2024","title":"Release notes > 0.4.1 - July 15, 2024","text":"0.4.1 - July 15, 2024"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.4.0 #193"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix semantic versioning check in tech-review hook #194"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps): bump sphinx from 7.3.7 to 7.4.0 #198"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\n[pre-commit.ci] pre-commit autoupdate #196"},{"objectID":"Release notes","href":"changelog.html#040---july-01-2024","title":"Release notes > 0.4.0 - July 01, 2024","text":"0.4.0 - July 01, 2024"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: technical review hook #183"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.3.2 #186"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps): bump importlib-metadata from 7.1.0 to 7.2.1 #187\n\nbuild(deps): bump sphinx-autodoc-typehints from 2.1.1 to 2.2.2 #188\n\nbuild(deps): bump ansys-sphinx-theme[autoapi] from 0.16.5 to 0.16.6 #189\n\nbuild(deps): bump importlib-metadata from 7.2.1 to 8.0.0 #192"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\n[pre-commit.ci] pre-commit autoupdate #190"},{"objectID":"Release notes","href":"changelog.html#032---june-20-2024","title":"Release notes > 0.3.2 - June 20, 2024","text":"0.3.2 - June 20, 2024"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: add recursive argument and code to add-license-headers #185"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps): bump pytest from 8.1.1 to 8.2.0 #172\n\nbuild(deps): bump ansys-sphinx-theme[autoapi] from 0.15.2 to 0.16.0 #175\n\nbuild(deps): bump pytest from 8.2.0 to 8.2.1 #176\n\nbuild(deps): bump ansys-sphinx-theme[autoapi] from 0.16.0 to 0.16.2 #178\n\nbuild(deps): bump ansys-sphinx-theme[autoapi] from 0.16.2 to 0.16.5 #180\n\nbuild(deps): bump pytest from 8.2.1 to 8.2.2 #181\n\nbuild(deps): bump sphinx-autodoc-typehints from 2.1.0 to 2.1.1 #182"},{"objectID":"Release notes","href":"changelog.html#miscellaneous","title":"Release notes > Miscellaneous","text":"Miscellaneous\n\n[pre-commit.ci] pre-commit autoupdate #173, #174, #177, #179, #184"},{"objectID":"Release notes","href":"changelog.html#031---april-23-2024","title":"Release notes > 0.3.1 - April 23, 2024","text":"0.3.1 - April 23, 2024"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nchore: update CHANGELOG for v0.3.0 #167\n\nbuild(deps): bump ansys/actions from 5 to 6 #170"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps): bump sphinx from 7.2.6 to 7.3.7 #168\n\nbuild(deps): bump sphinx-autodoc-typehints from 2.0.1 to 2.1.0 #169"},{"objectID":"Release notes","href":"changelog.html#030---april-18-2024","title":"Release notes > 0.3.0 - April 18, 2024","text":"0.3.0 - April 18, 2024"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: add doc-changelog and doc-deploy-changelog actions #164"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nmaint: bump reuse to v3.0.2 in add-license-headers #163"},{"objectID":"Release notes","href":"changelog.html#029---february-16-2024","title":"Release notes > 0.2.9 - February 16, 2024","text":"0.2.9 - February 16, 2024"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nPinned all dependencies"},{"objectID":"Release notes","href":"changelog.html#028---january-17-2024","title":"Release notes > 0.2.8 - January 17, 2024","text":"0.2.8 - January 17, 2024"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nAdd upper limit to reuse dependency"},{"objectID":"Release notes","href":"changelog.html#027---january-16-2024","title":"Release notes > 0.2.7 - January 16, 2024","text":"0.2.7 - January 16, 2024"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix pytest python versions and fileinput #118"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump gitpython from 3.1.40 to 3.1.41 #120\n\nBump ansys-sphinx-theme from 0.13.0 to 0.13.1 #121"},{"objectID":"Release notes","href":"changelog.html#026---january-11-2024","title":"Release notes > 0.2.6 - January 11, 2024","text":"0.2.6 - January 11, 2024"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd full header to file if empty #116"},{"objectID":"Release notes","href":"changelog.html#025---january-10-2024","title":"Release notes > 0.2.5 - January 10, 2024","text":"0.2.5 - January 10, 2024"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdded custom argument for the copyright’s start year & updated add_hook_changes #111"},{"objectID":"Release notes","href":"changelog.html#024---january-4-2024","title":"Release notes > 0.2.4 - January 4, 2024","text":"0.2.4 - January 4, 2024"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nApply hook changes after add-license-headers runs #108"},{"objectID":"Release notes","href":"changelog.html#023---january-2-2024","title":"Release notes > 0.2.3 - January 2, 2024","text":"0.2.3 - January 2, 2024"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nRemove python 3.8 and add python 3.12 #106\n\nUpdate year to 2024 in license files #107"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\npre-commit autoupdate #97, #99, #100, #103\n\nBump actions/labeler from 4 to 5 #98\n\nBump ansys/actions from 4 to 5 #102\n\nBump pytest from 7.4.3 to 7.4.4 #104"},{"objectID":"Release notes","href":"changelog.html#022---november-15-2023","title":"Release notes > 0.2.2 - November 15, 2023","text":"0.2.2 - November 15, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdd headers to tests and examples #85\n\nAdd typehints to add-license-headers functions #93"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix add-license-headers to keep edits from previously run hooks #88"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nRemove dep5 files from repository #89\n\nRemove .reuse and LICENSES folders #95"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump sphinx-autodoc-typehints from 1.24.0 to 1.25.2 #86, #90\n\npre-commit autoupdate #87, #94\n\nBump ansys-sphinx-theme from 0.12.4 to 0.12.5 #91"},{"objectID":"Release notes","href":"changelog.html#021---october-31-2023","title":"Release notes > 0.2.1 - October 31, 2023","text":"0.2.1 - October 31, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdded difference check between original file and updated file #77"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\npre-commit autoupdate #76\n\nBump ansys-sphinx-theme from 0.12.3 to 0.12.4 #80\n\nBump pytest from 7.4.2 to 7.4.3 #81"},{"objectID":"Release notes","href":"changelog.html#020---october-17-2023","title":"Release notes > 0.2.0 - October 17, 2023","text":"0.2.0 - October 17, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nAdded check_license argument #64\n\nRun hook on specific directories and files #65\n\nUpdate headers & improve unit tests #69\n\nCreate assets folder with common REUSE templates #72\n\nRun add-license-headers hook serially #74"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nRemoved loc argument & passed in committed files #57"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nBump ansys-sphinx-theme from 0.12.1 to 0.12.2 #70\n\nBump pre-commit from v4.4.0 to v4.5.0 #71"},{"objectID":"Release notes","href":"changelog.html#013---september-8-2023","title":"Release notes > 0.1.3 - September 8, 2023","text":"0.1.3 - September 8, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nCreate custom flags for add-license-header #44"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate descriptions for add-license-headers in README #40"},{"objectID":"Release notes","href":"changelog.html#012---september-5-2023","title":"Release notes > 0.1.2 - September 5, 2023","text":"0.1.2 - September 5, 2023"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\n[pre-commit.ci] pre-commit autoupdate #39"},{"objectID":"Release notes","href":"changelog.html#011---september-4-2023","title":"Release notes > 0.1.1 - September 4, 2023","text":"0.1.1 - September 4, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nDirectory checks & print statement updates #34"},{"objectID":"Release notes","href":"changelog.html#dependencies","title":"Release notes > Dependencies","text":"Dependencies\n\nbuild(deps-dev): bump gitpython from 3.1.32 to 3.1.34 #35\n\nbuild(deps-dev): bump pytest from 7.3.0 to 7.4.1 #38\n\nbuild(deps-dev): bump sphinx from 7.2.4 to 7.2.5 #37\n\nbuild(deps-dev): bump ansys-sphinx-theme from 0.10.4 to 0.10.5 #36"},{"objectID":"Release notes","href":"changelog.html#010---september-1-2023","title":"Release notes > 0.1.0 - September 1, 2023","text":"0.1.0 - September 1, 2023"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nCreate pre-commit hook to add license header to all files #7\n\nDefault args in pre-commit-hooks.yaml #11\n\nfeat: ignore links (temp) #20"},{"objectID":"Release notes","href":"changelog.html#changed","title":"Release notes > Changed","text":"Changed\n\nUpdate the readme file #21\n\nEdits to RST and PY files #28"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nFix add-license-headers for reuse version >=2 #10\n\nFix reuse 2.0 implementation #17"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-pre-commit-hooks endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/index.html#the-tech_reviewpy-module","title":"The tech_review.py module","text":"The tech_review.py module\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/index.html#summary","title":"The tech_review.py module > Summary","text":"Summary\n\nEnums\n\n\n\n\n\nFilenames\n\nEnum of files to check.\n\nDirectories\n\nEnum of directories to check.\n\nFunctions\n\n\n\n\n\ncheck_dirs_exist\n\nCheck folders exist in the root of the git repository.\n\ncheck_config_file\n\nCheck naming convention, version, author, and maintainer information.\n\ncheck_pyproject_toml\n\nCheck pyproject.toml file for correct naming convention, version, author, and maintainer.\n\ncheck_auth_maint\n\nCheck if the author and maintainer names and emails are the same.\n\ncheck_setup_py\n\nCheck setup.py file for correct naming convention, version, author, and maintainer.\n\ndownload_license_json\n\nDownload the licenses.json file and restructure it to only include the license ID and name.\n\nrestructure_json\n\nRemove extra information from licenses.json file.\n\ncheck_file_exists\n\nCheck files exist. If they do not exist, create them using jinja templates.\n\ngenerate_file_from_jinja\n\nGenerate file using jinja templates.\n\nwrite_content\n\nWrite generated content from jinja template to a file.\n\ncheck_file_content\n\nCheck the file content of the LICENSE and CONTRIBUTORS.md files.\n\nmain\n\nCheck files for technical review.\n\nConstants\n\n\n\n\n\nHOOK_PATH\n\nLocation of the pre-commit hook on your system.\n\nLICENSES_JSON\n\nJSON file containing licenses information.\n\nDEFAULT_AUTHOR_MAINT_NAME\n\nDefault name of project authors and maintainers.\n\nDEFAULT_AUTHOR_MAINT_EMAIL\n\nDefault email of project authors and maintainers.\n\nDEFAULT_START_YEAR\n\nDefault start year of the repository.\n\nDEFAULT_LICENSE\n\nDefault license of the repository\n\nJSON_URL\n\nURL to retrieve list of license IDs and names.\n\n"},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/index.html#description","title":"The tech_review.py module > Description","text":"Description\n\nModule for checking if a repository is compliant with required files in the technical review."},{"objectID":"Home","href":"api/src/ansys/pre_commit_hooks/tech_review/index.html#module-detail","title":"The tech_review.py module > Module detail","text":"Module detail\n\n\n\ntech_review.check_dirs_exist(repo_path: str, is_compliant: bool, directories: list) -> bool\n\nCheck folders exist in the root of the git repository.\n\nParameters\n\nrepo_path: str\n\nPath of the repository being checked.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\ndirectories: list\n\nList of directories to check if they exist in the repository.\n\nReturns\n\nbool\n\nTrue if all directories exist.\nFalse if a directory did not exist and was created.\n\n\n\ntech_review.check_config_file(repo_path: str, author_maint_name: str, author_maint_email: str, is_compliant: bool, non_compliant_name: bool) -> bool\n\nCheck naming convention, version, author, and maintainer information.\n\nParameters\n\nrepo_path: str\n\nPath of the repository being checked.\n\nauthor_maint_name: str\n\nProject author and maintainer’s name.\n\nauthor_maint_email: str\n\nProject author and maintainer’s email.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nnon_compliant_name: bool\n\nTrue if the repository’s name is not in the form ansys-- and it is permitted.\nFalse if the repository’s name is in the form ansys--.\n\nReturns\n\nbool\n\nTrue if all files exist and contain the correct content.\nFalse if a file was created or did not contain the correct content.\n\n\n\ntech_review.check_pyproject_toml(repo_path: str, author_maint_name: str, author_maint_email: str, is_compliant: bool, non_compliant_name: bool) -> tuple\n\nCheck pyproject.toml file for correct naming convention, version, author, and maintainer.\n\nParameters\n\nrepo_path: str\n\nPath of the repository being checked.\n\nauthor_maint_name: str\n\nProject author and maintainer’s name.\n\nauthor_maint_email: str\n\nProject author and maintainer’s email.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nnon_compliant_name: bool\n\nTrue if the repository’s name is not in the form ansys-- and it is permitted.\nFalse if the repository’s name is in the form ansys--.\n\nReturns\n\nbool\n\nTrue if the pyproject.toml file’s information was correct.\nFalse if the pyproject.toml file had missing or incorrect information.\n\npython:str\n\nName of the project from the pyproject.toml file.\n\n\n\ntech_review.check_auth_maint(project_value: str, arg_value: str, err_string: str, is_compliant: bool)\n\nCheck if the author and maintainer names and emails are the same.\n\nParameters\n\nproject_value: str\n\nThe author or maintainer’s name or email retrieved from the pyproject.toml file.\n\narg_value: str\n\nThe author or maintainer’s name or email retrieved from the argument passed into the hook.\n\nerr_str: str\n\nThe message that is printed when an author or maintainer’s name or email is incorrect.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nReturns\n\nbool\n\nTrue if the author and maintainer’s name and email are correct.\nFalse if the author or maintainer’s name or email is incorrect.\n\n\n\ntech_review.check_setup_py(author_maint_name: str, author_maint_email: str, is_compliant: bool) -> tuple\n\nCheck setup.py file for correct naming convention, version, author, and maintainer.\n\nParameters\n\nauthor_maint_name: str\n\nProject author and maintainer’s name.\n\nauthor_maint_email: str\n\nProject author and maintainer’s email.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nReturns\n\nbool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\npython:str\n\nAn empty string since the setup.py check is not implemented.\n\n\n\ntech_review.download_license_json(url: str, json_file: str) -> bool\n\nDownload the licenses.json file and restructure it to only include the license ID and name.\n\nParameters\n\nurl: str\n\nThe URL to the licenses.json file that is downloaded.\n\njson_file: str\n\nThe path of the json_file to be written to and updated.\n\nReturns\n\nbool\n\nTrue if the license file was downloaded and updated.\nFalse if there was an issue downloading the license file.\n\n\n\ntech_review.restructure_json(file: str)\n\nRemove extra information from licenses.json file.\n\nParameters\n\nfile: str\n\nThe path of the json_file to be updated.\n\n\n\ntech_review.check_file_exists(repo_path: str, files: list, project_name: str, start_year: str, is_compliant: bool, license: str, repository_url: str, product: str, config_file: str, doc_repo_name: str) -> bool\n\nCheck files exist. If they do not exist, create them using jinja templates.\n\nParameters\n\nrepo_path: str\n\nPath of the repository being checked.\n\nfiles: list\n\nList of files to check if they exist and their content.\n\nproject_name: str\n\nThe name of the project.\n\nstart_year: str\n\nThe start year of the repository.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nlicense: str\n\nThe license the repository uses.\n\nrepository_url: str\n\nThe URL of the repository.\n\nproduct: str\n\nThe Ansys product the repository is based on.\n\nconfig_file: str\n\nIf the project’s config file is “setuptools” or “pyproject”.\n\ndoc_repo_name: str\n\nThe name of the repository to use in documentation.\n\nReturns\n\nbool\n\nTrue if the files exist and content was correct.\nFalse if a file was created and/or its content was incorrect.\n\n\n\ntech_review.generate_file_from_jinja(file: str, project_name: str, year_str: str, repo_url: str, product: str, config_file: str, doc_repo_name: str) -> str\n\nGenerate file using jinja templates.\n\nParameters\n\nfile: str\n\nThe file that the template is being created for.\n\nproject_name: str\n\nThe name of the project.\n\nyear_str: str\n\nThe start year of the repository.\n\nrepo_url: str\n\nThe URL of the repository.\n\nproduct: str\n\nThe Ansys product the repository is based on.\n\nconfig_file: str\n\nIf the project’s config file is “setuptools” or “pyproject”.\n\ndoc_repo_name: str\n\nThe name of the repository to use in documentation.\n\nReturns\n\npython:str\n\nContent of the template that was generated.\n\n\n\ntech_review.write_content(message: str, file_path: str, file_content: str)\n\nWrite generated content from jinja template to a file.\n\nParameters\n\nmessage: str\n\nThe message that details which file is being created.\n\nfile_path: str\n\nThe path of the file to write the content to.\n\nfile_content: str\n\nThe file content that was generated from the jinja templates.\n\n\n\ntech_review.check_file_content(file: str, generated_content: str, is_compliant: bool, license: str) -> bool\n\nCheck the file content of the LICENSE and CONTRIBUTORS.md files.\n\nParameters\n\nfile: str\n\nThe file that the template is being created for.\n\ngenerated_content: str\n\nContent of the template that was generated.\n\nis_compliant: bool\n\nTrue if the repository is compliant.\nFalse if the repository is not compliant.\n\nlicense: str\n\nThe license the repository uses.\n\nReturns\n\nbool\n\nTrue if LICENSE and CONTRIBUTORS.md files had the correct content.\nFalse if LICENSE and CONTRIBUTORS.md files had the incorrect content.\n\n\n\ntech_review.main()\n\nCheck files for technical review.\n\n\n\ntech_review.HOOK_PATH\n\nLocation of the pre-commit hook on your system.\n\n\n\ntech_review.LICENSES_JSON\n\nJSON file containing licenses information.\n\n\n\ntech_review.DEFAULT_AUTHOR_MAINT_NAME = 'ANSYS, Inc.'\n\nDefault name of project authors and maintainers.\n\n\n\ntech_review.DEFAULT_AUTHOR_MAINT_EMAIL = 'pyansys.core@ansys.com'\n\nDefault email of project authors and maintainers.\n\n\n\ntech_review.DEFAULT_START_YEAR\n\nDefault start year of the repository.\n\n\n\ntech_review.DEFAULT_LICENSE = 'MIT'\n\nDefault license of the repository\n\n\n\ntech_review.JSON_URL = 'https://raw.githubusercontent.com/spdx/license-list-data/main/json/licenses.json'\n\nURL to retrieve list of license IDs and names."},{"objectID":"Home","href":"getting-started/technical-review/index.html#tech-review-setup","title":"tech-review setup","text":"tech-review setup\n\nThe tech-review hook performs a brief technical review on repositories based on the Ansys\ntechnical part of the PyAnsys approval and public release process\ndescribed in the PyAnsys developer’s guide.\n\nThe hook checks the following aspects of your repository:\n\nThe .github, doc, src, and tests directories exist in the root of the repository.\n\nThe AUTHORS, CODE_OF_CONDUCT.md, CONTRIBUTING.md, CONTRIBUTORS.md, LICENSE,\nREADME.{rst|md}, and .github/dependabot.yml files exist.\n\nIf any of the directories are missing, the hook fails, and the missing directories are added to the\nrepository.\n\nIf any of the files are missing, the hook fails, and add the missing files are added to the repository\nusing Jinja templates.\n\nTo get started, add the hook to your .pre-commit-config.yaml file:\n\nProduct repositories\n\nThe following configuration is required for product libraries, such as PyMechanical,\nPyMAPDL, or PyAEDT, where {product} is the name of the product:\n\nFor example, for PyMechanical the {product} would be mechanical.\n\nOther repositories\n\nThe following configuration is required for libraries that do not fall under the product\ncategory, such as ansys-pre-commit-hooks, ansys-sphinx-theme, or ansys-actions:\n\nIn the preceding code, {product} is the name variable under [tool.flit.module] in\nthe pyproject.toml file. For example, for ansys-pre-commit-hooks the {product} is\npre_commit_hooks.\n\nThe --non_compliant_name flag is used if the repository does not follow the typical naming\nconvention of ansys-*-*."},{"objectID":"Home","href":"getting-started/technical-review/index.html#tech-review-hook-arguments","title":"tech-review setup > tech-review hook arguments","text":"tech-review hook arguments\n\n\n\n\n\n\n\nArgument\n\nDefault value\n\nDescription\n\n--author_maint_name\n\nANSYS, Inc.\n\nName of the author and maintainer in the pyproject.toml file.\n\n--author_maint_email\n\npyansys.core@ansys.com\n\nEmail of the author and maintainer in the pyproject.toml file.\n\n--license\n\nMIT\n\nLicense that is being used by your repository.\n\n--url\n\nhttps://github.com/ansys/{repo-name}, replacing {repo-name} with the name of the repository\n\nURL of the repository.\n\n--product\n\nName of the repository’s product. For example, mechanical for PyMechanical.\n\nProduct for the repository.\n\n--non_compliant_name\n\nN/A\n\nFlag to use if the repository does not follow the typical naming convention of ansys-*-*."},{"objectID":"Home","href":"getting-started/add-license-headers/faq.html#frequently-asked-questions","title":"Frequently asked questions","text":"Frequently asked questions\n\nHow do you specify additional directories and files to run the hook on?\n\nTo specify additional files and/or directories the hook should run on, add the necessary regex\nto the files line in your .pre-commit-config.yaml file:\n\nThis would run the hook on Python and ReStructuredText (RST) files in the src,\nexamples, tests, and doc directories, as well as PROTO and CPP files\nin any directory.\n\nThe default regex for the files field is '(src|examples|tests)/.*\\.(py)|\\.(proto)'.\nAdd onto this regex to specify additional files and directories to ensure that the hook\nruns on Python files in the src, examples, and tests directories, as well as\nPROTO files in any directory at the minimum.\n\nHow do you ignore specific files or file types?\n\nTo ignore specific files or file types, add the exclude argument to the hook in your\n.pre-commit-config.yaml file:\n\npath/to/file1.py excludes the stated file.\n\npath/to/.*\\.(ts|cpp) excludes all TS and CPP files within the path/to directory.\n\n(.folder1|folder2)/.* excludes directories named .folder1 and folder2.\n\n.*\\.js excludes all JS files in all directories.\n\n\\..* excludes all hidden files.\n\nHow do you change the copyright phrase from “ANSYS, Inc. and/or its affiliates.”?\n\nTo change the copyright phrase in the copyright line, add the --custom_copyright argument\nto the hook in your .pre-commit-config.yaml file:\n\nThis would change the copyright line to Copyright (C) 2025 custom copyright phrase.\n\nHow do you ignore checking for licensing information in the files?\n\nTo ignore checking for the MIT license in the files, add the --ignore_license_check\nargument to the hook in your .pre-commit-config.yaml file:\n\nHow do you use a custom template?\n\nTo use a custom template, create the .reuse/templates/ directory in the root of your\nrepository and add the Jinja template to that directory. The custom template cannot be named\nansys.jinja2. Otherwise, it would be removed after the hook is done running.\n\nAdd the --custom_template argument to the hook in your .pre-commit-config.yaml file:\n\nHow do you use a custom license?\n\nTo use a custom license, create the LICENSES directory in the root of your\nrepository and add the license to that directory. The custom license cannot be named\nMIT.txt. Otherwise, it would be removed after the hook is done running.\n\nTo use a custom license, add the --custom_license argument to the hook in your\n.pre-commit-config.yaml file:\n\nLicenses supported by REUSE can be found in the\nspdx/license-list-data repository.\nSelect a license text file from that repository and copy it to the LICENSES directory.\n\nWhat should the start year be if my repository was created before the current year?\n\nIf you are adding license headers to repositories that were started prior to the current year,\nadd the --start_year argument with the year that your first file was committed. For\nexample, if start_year is 2023 and the current year is 2025, the copyright statement would\nbe:\n\nCopyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates."},{"objectID":"Home","href":"getting-started/add-license-headers/issues-limitations.html#known-issues-and-limitations","title":"Known issues and limitations","text":"Known issues and limitations\n\nAfter running the hook, I am seeing a “Skipped unrecognized file” message\n\nThe hook skips files that are not recognized by REUSE.\nIf you see this message, the file type is not supported by the hook.  For a list of\nsupported file types, see the\nEXTENSION_COMMENT_STYLE_MAP\nin the reuse-tool repository.\n\nTo request support for an unrecognized file type, open an\nissue in the ansys/pre-commit-hooks\nrepository."}]