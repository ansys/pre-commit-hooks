name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'pre-commit-hooks.docs.ansys.com'
  LIBRARY_NAME: 'ansys-pre-commit-hooks'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-changelog:
    name: "Update CHANGELOG for new tag"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: ansys/actions/build-wheelhouse@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

      # - name: "Install Git and clone project"
      #   uses: actions/checkout@v4

      # - name: "Set up Python ${{ matrix.python-version }}"
      #   uses: ansys/actions/_setup-python@main
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     use-cache: true

      # - name: "Update pip and install the build and wheel libraries"
      #   shell: bash
      #   run: |
      #     python -m pip install --upgrade pip build wheel

      # - name: "Install the library"
      #   shell: bash
      #   run: |
      #     python -m pip install . --verbose

      # - name: "Verify library is properly installed and get its version number"
      #   shell: bash
      #   run: |
      #     library_name=${{ env.LIBRARY_NAME }}

      #     version=$(python -c "import importlib.metadata as importlib_metadata; print(importlib_metadata.version('$library_name'))")

      #     if [ -z "$version" ]; then
      #         echo "Problem getting the library version"
      #         exit 1;
      #     else
      #         echo "The library version is: $version";
      #     fi;
      #     echo "library_version=$version" >> $GITHUB_ENV

      # - name: "Generate the wheelhouse"
      #   shell: bash
      #   run: |
      #     python -m pip wheel . -w wheelhouse

  tests:
    name: "Tests"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
       os: [ubuntu-latest, windows-latest]
       python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - uses: ansys/actions/tests-pytest@v6
        with:
          pytest-extra-args: "--cov=ansys.pre_commit_hooks --cov-report=term --cov-report=html:.cov/html"
          python-version: ${{ matrix.python-version }}

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - uses: ansys/actions/doc-build@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  build-library:
    name: "Build library basic example"
    runs-on: ubuntu-latest
    needs: [doc-build, tests]
    steps:
      - uses: ansys/actions/build-library@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-dev@v6
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library, update-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v6
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
